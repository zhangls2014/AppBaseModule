plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
    id 'com.google.protobuf'
    id 'com.google.devtools.ksp'
}

// 读取 git 的提交数量作为版本号
static def gitVersionCode() {
    def cmd = 'git rev-list HEAD --first-parent --count'
    (cmd.execute().text.trim() ?: "1").toInteger()
}
// 读取 git 的 commit tag 作为应用的版本名，如果后面
static def gitVersionTag() {
    def cmd = 'git describe --tags'
    def tag = cmd.execute().text.trim().split("-")
    if (tag.length > 1) {
        tag.first() + "-develop"
    } else {
        tag.first()
    }
}

android {
    namespace = "com.zhangls.base"
    compileSdk Versions.compileSdk
    buildToolsVersion = Versions.buildTool

    defaultConfig {
        minSdk Versions.minSdk
        targetSdk Versions.targetSdk
        versionCode gitVersionCode()
        versionName gitVersionTag()

        consumerProguardFiles "proguard-rules.pro"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    kotlin {
        jvmToolchain(11)
    }
    lintOptions {
        disable 'SpUsage', 'RtlHardcoded'
    }
    buildFeatures {
        buildConfig = true
    }
    packagingOptions {
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        exclude "**/*.proto"
    }
}

dependencies {
    // 测试、Debug
    testImplementation Deps.junit
    androidTestImplementation Deps.extJunit
    androidTestImplementation Deps.espresso

    api Deps.coroutinesAndroid
    api Deps.coreKtx
    api Deps.materialDesign
    api Deps.constraintLayout
    api Deps.navigationFragmentKtx
    api Deps.datastorePreferences

    // 网络请求框架：Retrofit + Gson
    api Deps.gson
    api Deps.retrofit2
    api Deps.retrofit2ConverterGson
    api Deps.okHttpLogging
    api Deps.utilcodex
    // 日志框架
    api Deps.glog
    api Deps.timber
    api Deps.protobuf
}

afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release

                groupId = 'com.zhangls'
                artifactId = 'base'
                version = gitVersionTag()
            }
        }
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.21.12'
    }
    plugins {
        javalite {
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                // In most cases you don't need the full Java output
                // if you use the lite output.
                remove java
            }
            task.plugins {
                javalite {}
            }
        }
    }
}
